import string, sys, os
from platform import system, machine

Import('platform_name', 'noxpidl')

geckosdk = ''

libs = ['xpcom', 'xpcomglue_s', 'nspr4', 'plds4', 'plc4', 'mozalloc']

# We use firefox development files instead for geckosdk on FreeBSD
if system() != 'FreeBSD':
	try:
		geckosdk = os.environ['GECKO_SDK']
	except:
		print "Please set environment variable GECKO_SDK first."
		sys.exit(1)

	cpppath = [os.path.join(geckosdk, 'include'),
			   os.path.join(geckosdk, 'sdk', 'include')]
	libpath = [os.path.join(geckosdk, 'lib'),
			   os.path.join(geckosdk, 'sdk', 'lib')]

if system() == 'Linux':
    cxxflags = ['-include', 'mozilla-config.h',
                '-Wall', '-O2',
                '-fno-rtti', '-fno-exceptions',
                '-Wconversion',
                '-Wpointer-arith',
                '-Wcast-align',
                '-Woverloaded-virtual',
                '-Wsynth',
                '-Wno-ctor-dtor-privacy',
                '-Wno-non-virtual-dtor',
                '-Wno-long-long',
                '-pedantic',
                '-fshort-wchar',
                '-pthread', '-pipe']
    cpppath.append('/usr/include/nspr')

elif system() == 'Darwin':
    cxxflags = []

elif system() == 'Windows':
    cxxflags = ['/D', 'WIN32', '/D', 'XP_WIN', '/nologo', '/MT', '/O2']
    inc = os.environ['INCLUDE']
    if inc:
        for i in inc.split(';'):
            cpppath.append(i)
    lib = os.environ['LIB']
    if lib:
        for i in lib.split(';'):
            libpath.append(i)

elif system() == 'FreeBSD':
    cxxflags = ['-DOSTYPE="FreeBSD7"',
                '-DOSARCH=FreeBSD',
                '-Wall', '-O2',
                '-fPIC', '-fno-rtti', '-fno-exceptions',
                '-fno-strict-aliasing', '-pipe', '-fshort-wchar',
                '-Wconversion', '-Wpointer-arith',
                '-Woverloaded-virtual', '-Wsynth',
                '-Wno-ctor-dtor-privacy', '-Wno-non-virtual-dtor',
                '-Wcast-align', '-Wno-long-long',
                '-DNDEBUG', '-DTRIMMED',
                '-include', 'mozilla-config.h']
    cpppath = ['/usr/local/include/nspr',
               '/usr/local/include/firefox3/stable',
               '/usr/local/include/firefox3/unstable']
    libpath = ['/usr/local/lib',
               '/usr/local/lib/firefox3/sdk/lib']

env = Environment(CPPPATH = cpppath, LIBPATH = libpath, LIBS = libs,
                  CXXFLAGS= cxxflags)

bxpt = Builder(
    action = 'xpidl -w -m typelib -Icomponents -I%s -I%s -e $TARGET $SOURCE' \
             % (os.path.join(geckosdk, 'idl'),
                os.path.join(geckosdk, 'sdk', 'idl')),
    suffix = '.xpt', src_suffix = '.idl')

bhdr = Builder(
    action = 'xpidl -w -m header -Icomponents -I%s -I%s -e $TARGET $SOURCE' \
             % (os.path.join(geckosdk, 'idl'),
                os.path.join(geckosdk, 'sdk', 'idl')),
    suffix = '.h', src_suffix = '.idl')

idl = Environment(BUILDERS = {'IDL2XPT' : bxpt, 'IDL2HDR' : bhdr },
                  ENV = os.environ)
p = string.split(idl['ENV']['PATH'], os.pathsep)
p.insert(0, geckosdk)
p.insert(0, os.path.join(geckosdk, 'bin'))
p.insert(0, os.path.join(geckosdk, 'sdk', 'bin'))
idl['ENV']['PATH'] = string.join(p, os.pathsep)

xpts = []
hdrs = []
idls = ['ICHMFile', 'ICHMUnitInfo']
if noxpidl != '1':
    for i in idls: xpts.append(idl.IDL2XPT(i))
    for i in idls: hdrs.append(idl.IDL2HDR(i))
else:
    for i in idls: xpts.append('#components/' + i + '.xpt')

libchm = env.SharedLibrary('#platform/%s/components/libchm' % platform_name,
                           ['chm_lib.cpp',
                            'lzx.cpp',
                            'mozCHMModule.cpp',
                            'mozCHMFile.cpp',
                            'mozCHMUnitInfo.cpp',
                            'mozCHMInputStream.cpp'])
NoClean(libchm)
Default([xpts, hdrs, libchm])

xpts.append(os.path.join('components', 'chm_protocol.js'))
Return('xpts')
